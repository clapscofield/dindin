{"ast":null,"code":"import * as types from './types';\nimport AuthService from \"../services/AuthService\";\nimport AuthServiceEstudante from 'services/AuthServiceEstudante';\nexport const loginInstituicao = dadosInstituicao => ({\n  type: types.LOGIN_INSTITUICAO,\n  payload: dadosInstituicao\n});\nexport const inserirEquipe = equipes => ({\n  type: types.INSERIR_EQUIPE,\n  payload: equipes\n});\n/* MESSAGE ACTIONS */\n\nexport const setMessage = message => ({\n  type: types.SET_MESSAGE,\n  payload: message\n});\nexport const clearMessage = () => ({\n  type: types.CLEAR_MESSAGE\n});\n/* LOGIN ACTIONS */\n\nexport const register = instituicao => dispatch => {\n  return AuthService.register(instituicao).then(response => {\n    dispatch({\n      type: types.REGISTER_SUCCESS\n    });\n    dispatch({\n      type: types.SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: types.REGISTER_FAIL\n    });\n    dispatch({\n      type: types.SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: types.LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: types.LOGIN_FAIL\n    });\n    dispatch({\n      type: types.SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: types.LOGOUT\n  });\n};\n/* LOGIN ACTIONS ESTUDANTES */\n\nexport const loginEstudante = (username, password) => dispatch => {\n  return AuthServiceEstudante.login(username, password).then(data => {\n    dispatch({\n      type: types.LOGIN_SUCCESS_ESTUDANTE,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: types.LOGIN_FAIL_ESTUDANTE\n    });\n    dispatch({\n      type: types.SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logoutEstudante = () => dispatch => {\n  AuthServiceEstudante.logout();\n  dispatch({\n    type: types.LOGOUT_ESTUDANTE\n  });\n};","map":{"version":3,"sources":["/Users/clarissescofield/Desktop/2021.2/Prática Software/projetoPDS/front/src/redux/actionCreators.js"],"names":["types","AuthService","AuthServiceEstudante","loginInstituicao","dadosInstituicao","type","LOGIN_INSTITUICAO","payload","inserirEquipe","equipes","INSERIR_EQUIPE","setMessage","message","SET_MESSAGE","clearMessage","CLEAR_MESSAGE","register","instituicao","dispatch","then","response","REGISTER_SUCCESS","data","Promise","resolve","error","toString","REGISTER_FAIL","reject","login","username","password","LOGIN_SUCCESS","user","LOGIN_FAIL","logout","LOGOUT","loginEstudante","LOGIN_SUCCESS_ESTUDANTE","LOGIN_FAIL_ESTUDANTE","logoutEstudante","LOGOUT_ESTUDANTE"],"mappings":"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","sourcesContent":["import * as types from './types';\nimport AuthService from \"../services/AuthService\";\nimport AuthServiceEstudante from 'services/AuthServiceEstudante';\n\nexport const loginInstituicao = (dadosInstituicao) => ({\n  type: types.LOGIN_INSTITUICAO,\n  payload: dadosInstituicao\n})\n\n\nexport const inserirEquipe = (equipes) => ({\n  type: types.INSERIR_EQUIPE,\n  payload: equipes\n})\n\n\n/* MESSAGE ACTIONS */\n\nexport const setMessage = (message) => ({\n  type: types.SET_MESSAGE,\n  payload: message,\n});\n\nexport const clearMessage = () => ({\n  type: types.CLEAR_MESSAGE,\n});\n\n\n\n/* LOGIN ACTIONS */ \nexport const register = (instituicao) => (dispatch) => {\n  return AuthService.register(instituicao).then(\n    (response) => {\n      dispatch({\n        type: types.REGISTER_SUCCESS,\n      });\n\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: types.REGISTER_FAIL,\n      });\n\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const login = (username, password) => (dispatch) => {\n  return AuthService.login(username, password).then(\n    (data) => {\n      dispatch({\n        type: types.LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: types.LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: types.LOGOUT,\n  });\n};\n\n\n/* LOGIN ACTIONS ESTUDANTES */\nexport const loginEstudante = (username, password) => (dispatch) => {\n  return AuthServiceEstudante.login(username, password).then(\n    (data) => {\n      dispatch({\n        type: types.LOGIN_SUCCESS_ESTUDANTE,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: types.LOGIN_FAIL_ESTUDANTE,\n      });\n\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logoutEstudante = () => (dispatch) => {\n  AuthServiceEstudante.logout();\n\n  dispatch({\n    type: types.LOGOUT_ESTUDANTE,\n  });\n}; "]},"metadata":{},"sourceType":"module"}