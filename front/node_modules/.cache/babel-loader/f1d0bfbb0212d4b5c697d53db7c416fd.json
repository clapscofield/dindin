{"ast":null,"code":"import * as types from './types';\nexport const loginInstituicao = dadosInstituicao => ({\n  type: types.LOGIN_INSTITUICAO,\n  payload: dadosInstituicao\n});\nexport const inserirEquipe = equipes => ({\n  type: types.INSERIR_EQUIPE,\n  payload: equipes\n});\n/* MESSAGE ACTIONS */\n\nexport const setMessage = message => ({\n  type: SET_MESSAGE,\n  payload: message\n});\nexport const clearMessage = () => ({\n  type: CLEAR_MESSAGE\n});\n/* LOGIN ACTIONS */\n\nimport AuthService from \"../services/auth.service\";\nexport const register = (username, email, password) => dispatch => {\n  return AuthService.register(username, email, password).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/clarissescofield/Desktop/2020.2/ES/studyWar/front/src/redux/actionCreators.js"],"names":["types","loginInstituicao","dadosInstituicao","type","LOGIN_INSTITUICAO","payload","inserirEquipe","equipes","INSERIR_EQUIPE","setMessage","message","SET_MESSAGE","clearMessage","CLEAR_MESSAGE","AuthService","register","username","email","password","dispatch","then","response","REGISTER_SUCCESS","data","Promise","resolve","error","toString","REGISTER_FAIL","reject","login","LOGIN_SUCCESS","user","LOGIN_FAIL","logout","LOGOUT"],"mappings":"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","sourcesContent":["import * as types from './types';\n\nexport const loginInstituicao = (dadosInstituicao) => ({\n  type: types.LOGIN_INSTITUICAO,\n  payload: dadosInstituicao\n})\n\n\nexport const inserirEquipe = (equipes) => ({\n  type: types.INSERIR_EQUIPE,\n  payload: equipes\n})\n\n\n/* MESSAGE ACTIONS */\n\nexport const setMessage = (message) => ({\n  type: SET_MESSAGE,\n  payload: message,\n});\n\nexport const clearMessage = () => ({\n  type: CLEAR_MESSAGE,\n});\n\n\n\n/* LOGIN ACTIONS */ \nimport AuthService from \"../services/auth.service\";\n\nexport const register = (username, email, password) => (dispatch) => {\n  return AuthService.register(username, email, password).then(\n    (response) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const login = (username, password) => (dispatch) => {\n  return AuthService.login(username, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};"]},"metadata":{},"sourceType":"module"}